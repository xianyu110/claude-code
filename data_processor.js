const fs = require('fs');
const path = require('path');

class DataProcessor {
    constructor() {
        this.dataDir = './data';
        this.masterFile = path.join(this.dataDir, 'master_topics.json');
        this.historyFile = path.join(this.dataDir, 'scraping_history.json');
    }

    // Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆ
    loadMasterData() {
        if (fs.existsSync(this.masterFile)) {
            try {
                const data = fs.readFileSync(this.masterFile, 'utf8');
                return JSON.parse(data);
            } catch (error) {
                console.log('üìù ÂàõÂª∫Êñ∞ÁöÑ‰∏ªÊï∞ÊçÆÊñá‰ª∂');
                return { topics: [], last_updated: null, total_count: 0 };
            }
        }
        return { topics: [], last_updated: null, total_count: 0 };
    }

    // Âä†ËΩΩÊäìÂèñÂéÜÂè≤
    loadHistory() {
        if (fs.existsSync(this.historyFile)) {
            try {
                const data = fs.readFileSync(this.historyFile, 'utf8');
                return JSON.parse(data);
            } catch (error) {
                return { scrapes: [] };
            }
        }
        return { scrapes: [] };
    }

    // ËÆ°ÁÆóÊñáÊú¨Áõ∏‰ººÂ∫¶ÔºàÁÆÄÂçïÁâàÊú¨Ôºâ
    calculateSimilarity(str1, str2) {
        const len1 = str1.length;
        const len2 = str2.length;
        const matrix = Array(len2 + 1).fill(null).map(() => Array(len1 + 1).fill(null));

        for (let i = 0; i <= len1; i++) matrix[0][i] = i;
        for (let j = 0; j <= len2; j++) matrix[j][0] = j;

        for (let j = 1; j <= len2; j++) {
            for (let i = 1; i <= len1; i++) {
                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(
                    matrix[j][i - 1] + 1,
                    matrix[j - 1][i] + 1,
                    matrix[j - 1][i - 1] + indicator
                );
            }
        }

        const distance = matrix[len2][len1];
        const maxLen = Math.max(len1, len2);
        return (maxLen - distance) / maxLen;
    }

    // Ê£ÄÊü•ÊòØÂê¶‰∏∫ÈáçÂ§çËØùÈ¢ò
    isDuplicate(newTopic, existingTopics) {
        for (const existing of existingTopics) {
            // Ê†áÈ¢òÁõ∏‰ººÂ∫¶Ê£ÄÊü•
            const titleSimilarity = this.calculateSimilarity(
                newTopic.title.toLowerCase(),
                existing.title.toLowerCase()
            );

            // ‰ΩúËÄÖÁõ∏Âêå‰∏îÊ†áÈ¢òÁõ∏‰ººÂ∫¶È´ò‰∫é70%ËßÜ‰∏∫ÈáçÂ§ç
            if (existing.author === newTopic.author && titleSimilarity > 0.7) {
                return { isDupe: true, existing: existing };
            }

            // Ê†áÈ¢òÁõ∏‰ººÂ∫¶È´ò‰∫é85%ËßÜ‰∏∫ÈáçÂ§ç
            if (titleSimilarity > 0.85) {
                return { isDupe: true, existing: existing };
            }
        }
        return { isDupe: false };
    }

    // Â§ÑÁêÜÊñ∞Êï∞ÊçÆ
    processNewData(newTopics) {
        console.log('üîÑ ÂºÄÂßãÂ§ÑÁêÜÊñ∞Êï∞ÊçÆ...');
        
        const masterData = this.loadMasterData();
        const results = {
            new: [],
            updated: [],
            duplicates: [],
            total_processed: newTopics.length
        };

        newTopics.forEach((newTopic, index) => {
            const dupeCheck = this.isDuplicate(newTopic, masterData.topics);
            
            if (dupeCheck.isDupe) {
                // Â¶ÇÊûúÊòØÈáçÂ§çÁöÑÔºåÊ£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞Êï∞ÊçÆ
                const existing = dupeCheck.existing;
                let needsUpdate = false;

                if (newTopic.likes > existing.likes) {
                    existing.likes = newTopic.likes;
                    existing.heat_level = newTopic.heat_level;
                    existing.last_updated = newTopic.scraped_time;
                    needsUpdate = true;
                }

                if (needsUpdate) {
                    results.updated.push({
                        title: existing.title,
                        old_likes: existing.likes,
                        new_likes: newTopic.likes
                    });
                } else {
                    results.duplicates.push(newTopic.title);
                }
            } else {
                // Êñ∞ËØùÈ¢ò
                newTopic.id = `topic_${Date.now()}_${index}`;
                newTopic.first_seen = newTopic.scraped_time;
                newTopic.trend_data = [{ date: newTopic.scraped_time, likes: newTopic.likes }];
                
                masterData.topics.push(newTopic);
                results.new.push(newTopic);
            }
        });

        // Êõ¥Êñ∞‰∏ªÊï∞ÊçÆÊñá‰ª∂
        masterData.last_updated = new Date().toISOString();
        masterData.total_count = masterData.topics.length;
        
        // ÊåâÁÇπËµûÊï∞ÊéíÂ∫è
        masterData.topics.sort((a, b) => b.likes - a.likes);

        this.saveMasterData(masterData);
        this.saveProcessingResults(results);

        console.log(`‚úÖ Êï∞ÊçÆÂ§ÑÁêÜÂÆåÊàê:`);
        console.log(`   - Êñ∞Â¢ûËØùÈ¢ò: ${results.new.length}`);
        console.log(`   - Êõ¥Êñ∞ËØùÈ¢ò: ${results.updated.length}`);
        console.log(`   - ÈáçÂ§çËØùÈ¢ò: ${results.duplicates.length}`);

        return results;
    }

    // ‰øùÂ≠ò‰∏ªÊï∞ÊçÆ
    saveMasterData(data) {
        fs.writeFileSync(this.masterFile, JSON.stringify(data, null, 2), 'utf8');
        console.log(`üíæ ‰∏ªÊï∞ÊçÆÂ∑≤Êõ¥Êñ∞: ${data.total_count} ‰∏™ËØùÈ¢ò`);
    }

    // ‰øùÂ≠òÂ§ÑÁêÜÁªìÊûú
    saveProcessingResults(results) {
        const timestamp = new Date().toISOString();
        const history = this.loadHistory();
        
        history.scrapes.push({
            timestamp: timestamp,
            results: results
        });

        // Âè™‰øùÁïôÊúÄËøë30Â§©ÁöÑÂéÜÂè≤
        const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
        history.scrapes = history.scrapes.filter(
            scrape => new Date(scrape.timestamp) > thirtyDaysAgo
        );

        fs.writeFileSync(this.historyFile, JSON.stringify(history, null, 2), 'utf8');
    }

    // ÁîüÊàêÊØèÊó•Êä•Âëä
    generateDailyReport(results) {
        const today = new Date().toISOString().split('T')[0];
        const reportFile = path.join(this.dataDir, `daily_report_${today}.md`);

        const report = `# Â∞èÁ∫¢‰π¶AIËØùÈ¢òÊØèÊó•Êä•Âëä
## ${today}

### üìä Êï∞ÊçÆÊ¶ÇËßà
- Â§ÑÁêÜËØùÈ¢òÊÄªÊï∞: ${results.total_processed}
- Êñ∞Â¢ûËØùÈ¢ò: ${results.new.length}
- Êõ¥Êñ∞ËØùÈ¢ò: ${results.updated.length}
- ÈáçÂ§çËØùÈ¢ò: ${results.duplicates.length}

### üî• Êñ∞Â¢ûÁÉ≠Èó®ËØùÈ¢ò
${results.new.slice(0, 10).map((topic, index) => 
    `${index + 1}. **${topic.title}** - ${topic.author} (${topic.likes}Ëµû)`
).join('\n')}

### üìà Êï∞ÊçÆÊõ¥Êñ∞ËØùÈ¢ò
${results.updated.slice(0, 5).map((update, index) => 
    `${index + 1}. **${update.title}** - ÁÇπËµûÊï∞: ${update.old_likes} ‚Üí ${update.new_likes}`
).join('\n')}

### üí° Êï∞ÊçÆÊ¥ûÂØü
- Âπ≥ÂùáÁÇπËµûÊï∞: ${Math.round(results.new.reduce((sum, t) => sum + t.likes, 0) / results.new.length || 0)}
- È´òÁÉ≠Â∫¶ËØùÈ¢ò: ${results.new.filter(t => t.heat_level === 'È´òÁÉ≠Â∫¶').length}‰∏™

---
*Êä•ÂëäÁîüÊàêÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}*
`;

        fs.writeFileSync(reportFile, report, 'utf8');
        console.log(`üìã ÊØèÊó•Êä•ÂëäÂ∑≤ÁîüÊàê: ${reportFile}`);
        return reportFile;
    }

    // Ê∏ÖÁêÜÊóßÊñá‰ª∂
    cleanupOldFiles() {
        const files = fs.readdirSync(this.dataDir);
        const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);

        files.forEach(file => {
            if (file.startsWith('xiaohongshu_ai_topics_') && file.endsWith('.csv')) {
                const filePath = path.join(this.dataDir, file);
                const stats = fs.statSync(filePath);
                
                if (stats.mtime < thirtyDaysAgo) {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è Â∑≤Âà†Èô§ÊóßÊñá‰ª∂: ${file}`);
                }
            }
        });
    }

    // ÂØºÂá∫‰∏∫È£û‰π¶Ê†ºÂºèÁöÑCSV
    exportForFeishu() {
        const masterData = this.loadMasterData();
        const timestamp = new Date().toISOString().split('T')[0];
        const filename = `feishu_export_${timestamp}.csv`;
        const filepath = path.join(this.dataDir, filename);

        // È£û‰π¶Ê†ºÂºèÁöÑCSVÂ§¥ÈÉ®
        const headers = 'Â∫èÂè∑,ËØùÈ¢òÊ†áÈ¢ò,‰ΩúËÄÖ,ÁÇπËµûÊï∞,ËØùÈ¢òÂàÜÁ±ª,ÁÉ≠Â∫¶Á≠âÁ∫ß,È¶ñÊ¨°ÂèëÁé∞,ÊúÄÂêéÊõ¥Êñ∞,Êù•Ê∫ê\n';
        
        let csvContent = headers;
        masterData.topics.slice(0, 100).forEach((topic, index) => { // ÈôêÂà∂Ââç100‰∏™
            const row = [
                index + 1,
                `"${topic.title.replace(/"/g, '""')}"`,
                `"${topic.author.replace(/"/g, '""')}"`,
                topic.likes,
                topic.category,
                topic.heat_level,
                topic.first_seen || topic.scraped_time,
                topic.last_updated || topic.scraped_time,
                topic.source
            ].join(',');
            csvContent += row + '\n';
        });

        fs.writeFileSync(filepath, csvContent, 'utf8');
        console.log(`üì§ È£û‰π¶ÂØºÂá∫Êñá‰ª∂Â∑≤ÁîüÊàê: ${filepath}`);
        return filepath;
    }
}

module.exports = DataProcessor; 